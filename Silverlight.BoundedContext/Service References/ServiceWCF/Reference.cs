//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace Silverlight.BoundedContext.ServiceWCF {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlantaDto", Namespace="http://schemas.datacontract.org/2004/07/Application.DTOs")]
    public partial class PlantaDto : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DescripcionField;
        
        private string NombrePlantaField;
        
        private string PlantaIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Descripcion {
            get {
                return this.DescripcionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescripcionField, value) != true)) {
                    this.DescripcionField = value;
                    this.RaisePropertyChanged("Descripcion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NombrePlanta {
            get {
                return this.NombrePlantaField;
            }
            set {
                if ((object.ReferenceEquals(this.NombrePlantaField, value) != true)) {
                    this.NombrePlantaField = value;
                    this.RaisePropertyChanged("NombrePlanta");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlantaId {
            get {
                return this.PlantaIdField;
            }
            set {
                if ((object.ReferenceEquals(this.PlantaIdField, value) != true)) {
                    this.PlantaIdField = value;
                    this.RaisePropertyChanged("PlantaId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DepartamentosDto", Namespace="http://schemas.datacontract.org/2004/07/Application.DTOs")]
    public partial class DepartamentosDto : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DepartamentoIdField;
        
        private string DescripcionField;
        
        private string NombreDepartamentoField;
        
        private string PlantaIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DepartamentoId {
            get {
                return this.DepartamentoIdField;
            }
            set {
                if ((object.ReferenceEquals(this.DepartamentoIdField, value) != true)) {
                    this.DepartamentoIdField = value;
                    this.RaisePropertyChanged("DepartamentoId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Descripcion {
            get {
                return this.DescripcionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescripcionField, value) != true)) {
                    this.DescripcionField = value;
                    this.RaisePropertyChanged("Descripcion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NombreDepartamento {
            get {
                return this.NombreDepartamentoField;
            }
            set {
                if ((object.ReferenceEquals(this.NombreDepartamentoField, value) != true)) {
                    this.NombreDepartamentoField = value;
                    this.RaisePropertyChanged("NombreDepartamento");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlantaId {
            get {
                return this.PlantaIdField;
            }
            set {
                if ((object.ReferenceEquals(this.PlantaIdField, value) != true)) {
                    this.PlantaIdField = value;
                    this.RaisePropertyChanged("PlantaId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProcesosPorDepartamentosDto", Namespace="http://schemas.datacontract.org/2004/07/Application.DTOs")]
    public partial class ProcesosPorDepartamentosDto : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DepartamentoIdField;
        
        private string PlantaIdField;
        
        private string ProcesoIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DepartamentoId {
            get {
                return this.DepartamentoIdField;
            }
            set {
                if ((object.ReferenceEquals(this.DepartamentoIdField, value) != true)) {
                    this.DepartamentoIdField = value;
                    this.RaisePropertyChanged("DepartamentoId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlantaId {
            get {
                return this.PlantaIdField;
            }
            set {
                if ((object.ReferenceEquals(this.PlantaIdField, value) != true)) {
                    this.PlantaIdField = value;
                    this.RaisePropertyChanged("PlantaId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProcesoId {
            get {
                return this.ProcesoIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ProcesoIdField, value) != true)) {
                    this.ProcesoIdField = value;
                    this.RaisePropertyChanged("ProcesoId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProcesosDto", Namespace="http://schemas.datacontract.org/2004/07/Application.DTOs")]
    public partial class ProcesosDto : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string IdProcesoField;
        
        private string NombreProcesoField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IdProceso {
            get {
                return this.IdProcesoField;
            }
            set {
                if ((object.ReferenceEquals(this.IdProcesoField, value) != true)) {
                    this.IdProcesoField = value;
                    this.RaisePropertyChanged("IdProceso");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NombreProceso {
            get {
                return this.NombreProcesoField;
            }
            set {
                if ((object.ReferenceEquals(this.NombreProcesoField, value) != true)) {
                    this.NombreProcesoField = value;
                    this.RaisePropertyChanged("NombreProceso");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceWCF.IServiceN_Capas")]
    public interface IServiceN_Capas {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServiceN_Capas/GetAllPlantas", ReplyAction="http://tempuri.org/IServiceN_Capas/GetAllPlantasResponse")]
        System.IAsyncResult BeginGetAllPlantas(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<Silverlight.BoundedContext.ServiceWCF.PlantaDto> EndGetAllPlantas(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServiceN_Capas/InsertarPlantas", ReplyAction="http://tempuri.org/IServiceN_Capas/InsertarPlantasResponse")]
        System.IAsyncResult BeginInsertarPlantas(Silverlight.BoundedContext.ServiceWCF.PlantaDto plantaDto, System.AsyncCallback callback, object asyncState);
        
        Silverlight.BoundedContext.ServiceWCF.PlantaDto EndInsertarPlantas(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServiceN_Capas/UpdatePlanta", ReplyAction="http://tempuri.org/IServiceN_Capas/UpdatePlantaResponse")]
        System.IAsyncResult BeginUpdatePlanta(Silverlight.BoundedContext.ServiceWCF.PlantaDto plantaDto, System.AsyncCallback callback, object asyncState);
        
        Silverlight.BoundedContext.ServiceWCF.PlantaDto EndUpdatePlanta(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServiceN_Capas/ObtenerTodosLosDepartamentosPorPlanta", ReplyAction="http://tempuri.org/IServiceN_Capas/ObtenerTodosLosDepartamentosPorPlantaResponse")]
        System.IAsyncResult BeginObtenerTodosLosDepartamentosPorPlanta(string plantaId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<Silverlight.BoundedContext.ServiceWCF.DepartamentosDto> EndObtenerTodosLosDepartamentosPorPlanta(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServiceN_Capas/InsertarDepartamentos", ReplyAction="http://tempuri.org/IServiceN_Capas/InsertarDepartamentosResponse")]
        System.IAsyncResult BeginInsertarDepartamentos(Silverlight.BoundedContext.ServiceWCF.DepartamentosDto deptoDto, System.AsyncCallback callback, object asyncState);
        
        Silverlight.BoundedContext.ServiceWCF.DepartamentosDto EndInsertarDepartamentos(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServiceN_Capas/UpdateDepartamentos", ReplyAction="http://tempuri.org/IServiceN_Capas/UpdateDepartamentosResponse")]
        System.IAsyncResult BeginUpdateDepartamentos(Silverlight.BoundedContext.ServiceWCF.DepartamentosDto deptoDto, System.AsyncCallback callback, object asyncState);
        
        Silverlight.BoundedContext.ServiceWCF.DepartamentosDto EndUpdateDepartamentos(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServiceN_Capas/OtenerTodosLosProcesosPorDepto", ReplyAction="http://tempuri.org/IServiceN_Capas/OtenerTodosLosProcesosPorDeptoResponse")]
        System.IAsyncResult BeginOtenerTodosLosProcesosPorDepto(Silverlight.BoundedContext.ServiceWCF.ProcesosPorDepartamentosDto procesoDeptoDto, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<Silverlight.BoundedContext.ServiceWCF.ProcesosPorDepartamentosDto> EndOtenerTodosLosProcesosPorDepto(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServiceN_Capas/InsertarProcesosPorDepto", ReplyAction="http://tempuri.org/IServiceN_Capas/InsertarProcesosPorDeptoResponse")]
        System.IAsyncResult BeginInsertarProcesosPorDepto(Silverlight.BoundedContext.ServiceWCF.ProcesosPorDepartamentosDto ProcesosDeptos, System.AsyncCallback callback, object asyncState);
        
        Silverlight.BoundedContext.ServiceWCF.ProcesosPorDepartamentosDto EndInsertarProcesosPorDepto(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServiceN_Capas/ObtenerTodosLosProcesos", ReplyAction="http://tempuri.org/IServiceN_Capas/ObtenerTodosLosProcesosResponse")]
        System.IAsyncResult BeginObtenerTodosLosProcesos(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<Silverlight.BoundedContext.ServiceWCF.ProcesosDto> EndObtenerTodosLosProcesos(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceN_CapasChannel : Silverlight.BoundedContext.ServiceWCF.IServiceN_Capas, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllPlantasCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllPlantasCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<Silverlight.BoundedContext.ServiceWCF.PlantaDto> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<Silverlight.BoundedContext.ServiceWCF.PlantaDto>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InsertarPlantasCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public InsertarPlantasCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Silverlight.BoundedContext.ServiceWCF.PlantaDto Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Silverlight.BoundedContext.ServiceWCF.PlantaDto)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdatePlantaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdatePlantaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Silverlight.BoundedContext.ServiceWCF.PlantaDto Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Silverlight.BoundedContext.ServiceWCF.PlantaDto)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ObtenerTodosLosDepartamentosPorPlantaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ObtenerTodosLosDepartamentosPorPlantaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<Silverlight.BoundedContext.ServiceWCF.DepartamentosDto> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<Silverlight.BoundedContext.ServiceWCF.DepartamentosDto>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InsertarDepartamentosCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public InsertarDepartamentosCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Silverlight.BoundedContext.ServiceWCF.DepartamentosDto Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Silverlight.BoundedContext.ServiceWCF.DepartamentosDto)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateDepartamentosCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateDepartamentosCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Silverlight.BoundedContext.ServiceWCF.DepartamentosDto Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Silverlight.BoundedContext.ServiceWCF.DepartamentosDto)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OtenerTodosLosProcesosPorDeptoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public OtenerTodosLosProcesosPorDeptoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<Silverlight.BoundedContext.ServiceWCF.ProcesosPorDepartamentosDto> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<Silverlight.BoundedContext.ServiceWCF.ProcesosPorDepartamentosDto>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InsertarProcesosPorDeptoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public InsertarProcesosPorDeptoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Silverlight.BoundedContext.ServiceWCF.ProcesosPorDepartamentosDto Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Silverlight.BoundedContext.ServiceWCF.ProcesosPorDepartamentosDto)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ObtenerTodosLosProcesosCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ObtenerTodosLosProcesosCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<Silverlight.BoundedContext.ServiceWCF.ProcesosDto> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<Silverlight.BoundedContext.ServiceWCF.ProcesosDto>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceN_CapasClient : System.ServiceModel.ClientBase<Silverlight.BoundedContext.ServiceWCF.IServiceN_Capas>, Silverlight.BoundedContext.ServiceWCF.IServiceN_Capas {
        
        private BeginOperationDelegate onBeginGetAllPlantasDelegate;
        
        private EndOperationDelegate onEndGetAllPlantasDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllPlantasCompletedDelegate;
        
        private BeginOperationDelegate onBeginInsertarPlantasDelegate;
        
        private EndOperationDelegate onEndInsertarPlantasDelegate;
        
        private System.Threading.SendOrPostCallback onInsertarPlantasCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdatePlantaDelegate;
        
        private EndOperationDelegate onEndUpdatePlantaDelegate;
        
        private System.Threading.SendOrPostCallback onUpdatePlantaCompletedDelegate;
        
        private BeginOperationDelegate onBeginObtenerTodosLosDepartamentosPorPlantaDelegate;
        
        private EndOperationDelegate onEndObtenerTodosLosDepartamentosPorPlantaDelegate;
        
        private System.Threading.SendOrPostCallback onObtenerTodosLosDepartamentosPorPlantaCompletedDelegate;
        
        private BeginOperationDelegate onBeginInsertarDepartamentosDelegate;
        
        private EndOperationDelegate onEndInsertarDepartamentosDelegate;
        
        private System.Threading.SendOrPostCallback onInsertarDepartamentosCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateDepartamentosDelegate;
        
        private EndOperationDelegate onEndUpdateDepartamentosDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateDepartamentosCompletedDelegate;
        
        private BeginOperationDelegate onBeginOtenerTodosLosProcesosPorDeptoDelegate;
        
        private EndOperationDelegate onEndOtenerTodosLosProcesosPorDeptoDelegate;
        
        private System.Threading.SendOrPostCallback onOtenerTodosLosProcesosPorDeptoCompletedDelegate;
        
        private BeginOperationDelegate onBeginInsertarProcesosPorDeptoDelegate;
        
        private EndOperationDelegate onEndInsertarProcesosPorDeptoDelegate;
        
        private System.Threading.SendOrPostCallback onInsertarProcesosPorDeptoCompletedDelegate;
        
        private BeginOperationDelegate onBeginObtenerTodosLosProcesosDelegate;
        
        private EndOperationDelegate onEndObtenerTodosLosProcesosDelegate;
        
        private System.Threading.SendOrPostCallback onObtenerTodosLosProcesosCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ServiceN_CapasClient() {
        }
        
        public ServiceN_CapasClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceN_CapasClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceN_CapasClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceN_CapasClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetAllPlantasCompletedEventArgs> GetAllPlantasCompleted;
        
        public event System.EventHandler<InsertarPlantasCompletedEventArgs> InsertarPlantasCompleted;
        
        public event System.EventHandler<UpdatePlantaCompletedEventArgs> UpdatePlantaCompleted;
        
        public event System.EventHandler<ObtenerTodosLosDepartamentosPorPlantaCompletedEventArgs> ObtenerTodosLosDepartamentosPorPlantaCompleted;
        
        public event System.EventHandler<InsertarDepartamentosCompletedEventArgs> InsertarDepartamentosCompleted;
        
        public event System.EventHandler<UpdateDepartamentosCompletedEventArgs> UpdateDepartamentosCompleted;
        
        public event System.EventHandler<OtenerTodosLosProcesosPorDeptoCompletedEventArgs> OtenerTodosLosProcesosPorDeptoCompleted;
        
        public event System.EventHandler<InsertarProcesosPorDeptoCompletedEventArgs> InsertarProcesosPorDeptoCompleted;
        
        public event System.EventHandler<ObtenerTodosLosProcesosCompletedEventArgs> ObtenerTodosLosProcesosCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Silverlight.BoundedContext.ServiceWCF.IServiceN_Capas.BeginGetAllPlantas(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllPlantas(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<Silverlight.BoundedContext.ServiceWCF.PlantaDto> Silverlight.BoundedContext.ServiceWCF.IServiceN_Capas.EndGetAllPlantas(System.IAsyncResult result) {
            return base.Channel.EndGetAllPlantas(result);
        }
        
        private System.IAsyncResult OnBeginGetAllPlantas(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((Silverlight.BoundedContext.ServiceWCF.IServiceN_Capas)(this)).BeginGetAllPlantas(callback, asyncState);
        }
        
        private object[] OnEndGetAllPlantas(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<Silverlight.BoundedContext.ServiceWCF.PlantaDto> retVal = ((Silverlight.BoundedContext.ServiceWCF.IServiceN_Capas)(this)).EndGetAllPlantas(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllPlantasCompleted(object state) {
            if ((this.GetAllPlantasCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllPlantasCompleted(this, new GetAllPlantasCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllPlantasAsync() {
            this.GetAllPlantasAsync(null);
        }
        
        public void GetAllPlantasAsync(object userState) {
            if ((this.onBeginGetAllPlantasDelegate == null)) {
                this.onBeginGetAllPlantasDelegate = new BeginOperationDelegate(this.OnBeginGetAllPlantas);
            }
            if ((this.onEndGetAllPlantasDelegate == null)) {
                this.onEndGetAllPlantasDelegate = new EndOperationDelegate(this.OnEndGetAllPlantas);
            }
            if ((this.onGetAllPlantasCompletedDelegate == null)) {
                this.onGetAllPlantasCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllPlantasCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllPlantasDelegate, null, this.onEndGetAllPlantasDelegate, this.onGetAllPlantasCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Silverlight.BoundedContext.ServiceWCF.IServiceN_Capas.BeginInsertarPlantas(Silverlight.BoundedContext.ServiceWCF.PlantaDto plantaDto, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInsertarPlantas(plantaDto, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Silverlight.BoundedContext.ServiceWCF.PlantaDto Silverlight.BoundedContext.ServiceWCF.IServiceN_Capas.EndInsertarPlantas(System.IAsyncResult result) {
            return base.Channel.EndInsertarPlantas(result);
        }
        
        private System.IAsyncResult OnBeginInsertarPlantas(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Silverlight.BoundedContext.ServiceWCF.PlantaDto plantaDto = ((Silverlight.BoundedContext.ServiceWCF.PlantaDto)(inValues[0]));
            return ((Silverlight.BoundedContext.ServiceWCF.IServiceN_Capas)(this)).BeginInsertarPlantas(plantaDto, callback, asyncState);
        }
        
        private object[] OnEndInsertarPlantas(System.IAsyncResult result) {
            Silverlight.BoundedContext.ServiceWCF.PlantaDto retVal = ((Silverlight.BoundedContext.ServiceWCF.IServiceN_Capas)(this)).EndInsertarPlantas(result);
            return new object[] {
                    retVal};
        }
        
        private void OnInsertarPlantasCompleted(object state) {
            if ((this.InsertarPlantasCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InsertarPlantasCompleted(this, new InsertarPlantasCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InsertarPlantasAsync(Silverlight.BoundedContext.ServiceWCF.PlantaDto plantaDto) {
            this.InsertarPlantasAsync(plantaDto, null);
        }
        
        public void InsertarPlantasAsync(Silverlight.BoundedContext.ServiceWCF.PlantaDto plantaDto, object userState) {
            if ((this.onBeginInsertarPlantasDelegate == null)) {
                this.onBeginInsertarPlantasDelegate = new BeginOperationDelegate(this.OnBeginInsertarPlantas);
            }
            if ((this.onEndInsertarPlantasDelegate == null)) {
                this.onEndInsertarPlantasDelegate = new EndOperationDelegate(this.OnEndInsertarPlantas);
            }
            if ((this.onInsertarPlantasCompletedDelegate == null)) {
                this.onInsertarPlantasCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInsertarPlantasCompleted);
            }
            base.InvokeAsync(this.onBeginInsertarPlantasDelegate, new object[] {
                        plantaDto}, this.onEndInsertarPlantasDelegate, this.onInsertarPlantasCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Silverlight.BoundedContext.ServiceWCF.IServiceN_Capas.BeginUpdatePlanta(Silverlight.BoundedContext.ServiceWCF.PlantaDto plantaDto, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdatePlanta(plantaDto, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Silverlight.BoundedContext.ServiceWCF.PlantaDto Silverlight.BoundedContext.ServiceWCF.IServiceN_Capas.EndUpdatePlanta(System.IAsyncResult result) {
            return base.Channel.EndUpdatePlanta(result);
        }
        
        private System.IAsyncResult OnBeginUpdatePlanta(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Silverlight.BoundedContext.ServiceWCF.PlantaDto plantaDto = ((Silverlight.BoundedContext.ServiceWCF.PlantaDto)(inValues[0]));
            return ((Silverlight.BoundedContext.ServiceWCF.IServiceN_Capas)(this)).BeginUpdatePlanta(plantaDto, callback, asyncState);
        }
        
        private object[] OnEndUpdatePlanta(System.IAsyncResult result) {
            Silverlight.BoundedContext.ServiceWCF.PlantaDto retVal = ((Silverlight.BoundedContext.ServiceWCF.IServiceN_Capas)(this)).EndUpdatePlanta(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdatePlantaCompleted(object state) {
            if ((this.UpdatePlantaCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdatePlantaCompleted(this, new UpdatePlantaCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdatePlantaAsync(Silverlight.BoundedContext.ServiceWCF.PlantaDto plantaDto) {
            this.UpdatePlantaAsync(plantaDto, null);
        }
        
        public void UpdatePlantaAsync(Silverlight.BoundedContext.ServiceWCF.PlantaDto plantaDto, object userState) {
            if ((this.onBeginUpdatePlantaDelegate == null)) {
                this.onBeginUpdatePlantaDelegate = new BeginOperationDelegate(this.OnBeginUpdatePlanta);
            }
            if ((this.onEndUpdatePlantaDelegate == null)) {
                this.onEndUpdatePlantaDelegate = new EndOperationDelegate(this.OnEndUpdatePlanta);
            }
            if ((this.onUpdatePlantaCompletedDelegate == null)) {
                this.onUpdatePlantaCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdatePlantaCompleted);
            }
            base.InvokeAsync(this.onBeginUpdatePlantaDelegate, new object[] {
                        plantaDto}, this.onEndUpdatePlantaDelegate, this.onUpdatePlantaCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Silverlight.BoundedContext.ServiceWCF.IServiceN_Capas.BeginObtenerTodosLosDepartamentosPorPlanta(string plantaId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginObtenerTodosLosDepartamentosPorPlanta(plantaId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<Silverlight.BoundedContext.ServiceWCF.DepartamentosDto> Silverlight.BoundedContext.ServiceWCF.IServiceN_Capas.EndObtenerTodosLosDepartamentosPorPlanta(System.IAsyncResult result) {
            return base.Channel.EndObtenerTodosLosDepartamentosPorPlanta(result);
        }
        
        private System.IAsyncResult OnBeginObtenerTodosLosDepartamentosPorPlanta(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string plantaId = ((string)(inValues[0]));
            return ((Silverlight.BoundedContext.ServiceWCF.IServiceN_Capas)(this)).BeginObtenerTodosLosDepartamentosPorPlanta(plantaId, callback, asyncState);
        }
        
        private object[] OnEndObtenerTodosLosDepartamentosPorPlanta(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<Silverlight.BoundedContext.ServiceWCF.DepartamentosDto> retVal = ((Silverlight.BoundedContext.ServiceWCF.IServiceN_Capas)(this)).EndObtenerTodosLosDepartamentosPorPlanta(result);
            return new object[] {
                    retVal};
        }
        
        private void OnObtenerTodosLosDepartamentosPorPlantaCompleted(object state) {
            if ((this.ObtenerTodosLosDepartamentosPorPlantaCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ObtenerTodosLosDepartamentosPorPlantaCompleted(this, new ObtenerTodosLosDepartamentosPorPlantaCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ObtenerTodosLosDepartamentosPorPlantaAsync(string plantaId) {
            this.ObtenerTodosLosDepartamentosPorPlantaAsync(plantaId, null);
        }
        
        public void ObtenerTodosLosDepartamentosPorPlantaAsync(string plantaId, object userState) {
            if ((this.onBeginObtenerTodosLosDepartamentosPorPlantaDelegate == null)) {
                this.onBeginObtenerTodosLosDepartamentosPorPlantaDelegate = new BeginOperationDelegate(this.OnBeginObtenerTodosLosDepartamentosPorPlanta);
            }
            if ((this.onEndObtenerTodosLosDepartamentosPorPlantaDelegate == null)) {
                this.onEndObtenerTodosLosDepartamentosPorPlantaDelegate = new EndOperationDelegate(this.OnEndObtenerTodosLosDepartamentosPorPlanta);
            }
            if ((this.onObtenerTodosLosDepartamentosPorPlantaCompletedDelegate == null)) {
                this.onObtenerTodosLosDepartamentosPorPlantaCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnObtenerTodosLosDepartamentosPorPlantaCompleted);
            }
            base.InvokeAsync(this.onBeginObtenerTodosLosDepartamentosPorPlantaDelegate, new object[] {
                        plantaId}, this.onEndObtenerTodosLosDepartamentosPorPlantaDelegate, this.onObtenerTodosLosDepartamentosPorPlantaCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Silverlight.BoundedContext.ServiceWCF.IServiceN_Capas.BeginInsertarDepartamentos(Silverlight.BoundedContext.ServiceWCF.DepartamentosDto deptoDto, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInsertarDepartamentos(deptoDto, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Silverlight.BoundedContext.ServiceWCF.DepartamentosDto Silverlight.BoundedContext.ServiceWCF.IServiceN_Capas.EndInsertarDepartamentos(System.IAsyncResult result) {
            return base.Channel.EndInsertarDepartamentos(result);
        }
        
        private System.IAsyncResult OnBeginInsertarDepartamentos(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Silverlight.BoundedContext.ServiceWCF.DepartamentosDto deptoDto = ((Silverlight.BoundedContext.ServiceWCF.DepartamentosDto)(inValues[0]));
            return ((Silverlight.BoundedContext.ServiceWCF.IServiceN_Capas)(this)).BeginInsertarDepartamentos(deptoDto, callback, asyncState);
        }
        
        private object[] OnEndInsertarDepartamentos(System.IAsyncResult result) {
            Silverlight.BoundedContext.ServiceWCF.DepartamentosDto retVal = ((Silverlight.BoundedContext.ServiceWCF.IServiceN_Capas)(this)).EndInsertarDepartamentos(result);
            return new object[] {
                    retVal};
        }
        
        private void OnInsertarDepartamentosCompleted(object state) {
            if ((this.InsertarDepartamentosCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InsertarDepartamentosCompleted(this, new InsertarDepartamentosCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InsertarDepartamentosAsync(Silverlight.BoundedContext.ServiceWCF.DepartamentosDto deptoDto) {
            this.InsertarDepartamentosAsync(deptoDto, null);
        }
        
        public void InsertarDepartamentosAsync(Silverlight.BoundedContext.ServiceWCF.DepartamentosDto deptoDto, object userState) {
            if ((this.onBeginInsertarDepartamentosDelegate == null)) {
                this.onBeginInsertarDepartamentosDelegate = new BeginOperationDelegate(this.OnBeginInsertarDepartamentos);
            }
            if ((this.onEndInsertarDepartamentosDelegate == null)) {
                this.onEndInsertarDepartamentosDelegate = new EndOperationDelegate(this.OnEndInsertarDepartamentos);
            }
            if ((this.onInsertarDepartamentosCompletedDelegate == null)) {
                this.onInsertarDepartamentosCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInsertarDepartamentosCompleted);
            }
            base.InvokeAsync(this.onBeginInsertarDepartamentosDelegate, new object[] {
                        deptoDto}, this.onEndInsertarDepartamentosDelegate, this.onInsertarDepartamentosCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Silverlight.BoundedContext.ServiceWCF.IServiceN_Capas.BeginUpdateDepartamentos(Silverlight.BoundedContext.ServiceWCF.DepartamentosDto deptoDto, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateDepartamentos(deptoDto, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Silverlight.BoundedContext.ServiceWCF.DepartamentosDto Silverlight.BoundedContext.ServiceWCF.IServiceN_Capas.EndUpdateDepartamentos(System.IAsyncResult result) {
            return base.Channel.EndUpdateDepartamentos(result);
        }
        
        private System.IAsyncResult OnBeginUpdateDepartamentos(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Silverlight.BoundedContext.ServiceWCF.DepartamentosDto deptoDto = ((Silverlight.BoundedContext.ServiceWCF.DepartamentosDto)(inValues[0]));
            return ((Silverlight.BoundedContext.ServiceWCF.IServiceN_Capas)(this)).BeginUpdateDepartamentos(deptoDto, callback, asyncState);
        }
        
        private object[] OnEndUpdateDepartamentos(System.IAsyncResult result) {
            Silverlight.BoundedContext.ServiceWCF.DepartamentosDto retVal = ((Silverlight.BoundedContext.ServiceWCF.IServiceN_Capas)(this)).EndUpdateDepartamentos(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateDepartamentosCompleted(object state) {
            if ((this.UpdateDepartamentosCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateDepartamentosCompleted(this, new UpdateDepartamentosCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateDepartamentosAsync(Silverlight.BoundedContext.ServiceWCF.DepartamentosDto deptoDto) {
            this.UpdateDepartamentosAsync(deptoDto, null);
        }
        
        public void UpdateDepartamentosAsync(Silverlight.BoundedContext.ServiceWCF.DepartamentosDto deptoDto, object userState) {
            if ((this.onBeginUpdateDepartamentosDelegate == null)) {
                this.onBeginUpdateDepartamentosDelegate = new BeginOperationDelegate(this.OnBeginUpdateDepartamentos);
            }
            if ((this.onEndUpdateDepartamentosDelegate == null)) {
                this.onEndUpdateDepartamentosDelegate = new EndOperationDelegate(this.OnEndUpdateDepartamentos);
            }
            if ((this.onUpdateDepartamentosCompletedDelegate == null)) {
                this.onUpdateDepartamentosCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateDepartamentosCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateDepartamentosDelegate, new object[] {
                        deptoDto}, this.onEndUpdateDepartamentosDelegate, this.onUpdateDepartamentosCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Silverlight.BoundedContext.ServiceWCF.IServiceN_Capas.BeginOtenerTodosLosProcesosPorDepto(Silverlight.BoundedContext.ServiceWCF.ProcesosPorDepartamentosDto procesoDeptoDto, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginOtenerTodosLosProcesosPorDepto(procesoDeptoDto, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<Silverlight.BoundedContext.ServiceWCF.ProcesosPorDepartamentosDto> Silverlight.BoundedContext.ServiceWCF.IServiceN_Capas.EndOtenerTodosLosProcesosPorDepto(System.IAsyncResult result) {
            return base.Channel.EndOtenerTodosLosProcesosPorDepto(result);
        }
        
        private System.IAsyncResult OnBeginOtenerTodosLosProcesosPorDepto(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Silverlight.BoundedContext.ServiceWCF.ProcesosPorDepartamentosDto procesoDeptoDto = ((Silverlight.BoundedContext.ServiceWCF.ProcesosPorDepartamentosDto)(inValues[0]));
            return ((Silverlight.BoundedContext.ServiceWCF.IServiceN_Capas)(this)).BeginOtenerTodosLosProcesosPorDepto(procesoDeptoDto, callback, asyncState);
        }
        
        private object[] OnEndOtenerTodosLosProcesosPorDepto(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<Silverlight.BoundedContext.ServiceWCF.ProcesosPorDepartamentosDto> retVal = ((Silverlight.BoundedContext.ServiceWCF.IServiceN_Capas)(this)).EndOtenerTodosLosProcesosPorDepto(result);
            return new object[] {
                    retVal};
        }
        
        private void OnOtenerTodosLosProcesosPorDeptoCompleted(object state) {
            if ((this.OtenerTodosLosProcesosPorDeptoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OtenerTodosLosProcesosPorDeptoCompleted(this, new OtenerTodosLosProcesosPorDeptoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OtenerTodosLosProcesosPorDeptoAsync(Silverlight.BoundedContext.ServiceWCF.ProcesosPorDepartamentosDto procesoDeptoDto) {
            this.OtenerTodosLosProcesosPorDeptoAsync(procesoDeptoDto, null);
        }
        
        public void OtenerTodosLosProcesosPorDeptoAsync(Silverlight.BoundedContext.ServiceWCF.ProcesosPorDepartamentosDto procesoDeptoDto, object userState) {
            if ((this.onBeginOtenerTodosLosProcesosPorDeptoDelegate == null)) {
                this.onBeginOtenerTodosLosProcesosPorDeptoDelegate = new BeginOperationDelegate(this.OnBeginOtenerTodosLosProcesosPorDepto);
            }
            if ((this.onEndOtenerTodosLosProcesosPorDeptoDelegate == null)) {
                this.onEndOtenerTodosLosProcesosPorDeptoDelegate = new EndOperationDelegate(this.OnEndOtenerTodosLosProcesosPorDepto);
            }
            if ((this.onOtenerTodosLosProcesosPorDeptoCompletedDelegate == null)) {
                this.onOtenerTodosLosProcesosPorDeptoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOtenerTodosLosProcesosPorDeptoCompleted);
            }
            base.InvokeAsync(this.onBeginOtenerTodosLosProcesosPorDeptoDelegate, new object[] {
                        procesoDeptoDto}, this.onEndOtenerTodosLosProcesosPorDeptoDelegate, this.onOtenerTodosLosProcesosPorDeptoCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Silverlight.BoundedContext.ServiceWCF.IServiceN_Capas.BeginInsertarProcesosPorDepto(Silverlight.BoundedContext.ServiceWCF.ProcesosPorDepartamentosDto ProcesosDeptos, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInsertarProcesosPorDepto(ProcesosDeptos, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Silverlight.BoundedContext.ServiceWCF.ProcesosPorDepartamentosDto Silverlight.BoundedContext.ServiceWCF.IServiceN_Capas.EndInsertarProcesosPorDepto(System.IAsyncResult result) {
            return base.Channel.EndInsertarProcesosPorDepto(result);
        }
        
        private System.IAsyncResult OnBeginInsertarProcesosPorDepto(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Silverlight.BoundedContext.ServiceWCF.ProcesosPorDepartamentosDto ProcesosDeptos = ((Silverlight.BoundedContext.ServiceWCF.ProcesosPorDepartamentosDto)(inValues[0]));
            return ((Silverlight.BoundedContext.ServiceWCF.IServiceN_Capas)(this)).BeginInsertarProcesosPorDepto(ProcesosDeptos, callback, asyncState);
        }
        
        private object[] OnEndInsertarProcesosPorDepto(System.IAsyncResult result) {
            Silverlight.BoundedContext.ServiceWCF.ProcesosPorDepartamentosDto retVal = ((Silverlight.BoundedContext.ServiceWCF.IServiceN_Capas)(this)).EndInsertarProcesosPorDepto(result);
            return new object[] {
                    retVal};
        }
        
        private void OnInsertarProcesosPorDeptoCompleted(object state) {
            if ((this.InsertarProcesosPorDeptoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InsertarProcesosPorDeptoCompleted(this, new InsertarProcesosPorDeptoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InsertarProcesosPorDeptoAsync(Silverlight.BoundedContext.ServiceWCF.ProcesosPorDepartamentosDto ProcesosDeptos) {
            this.InsertarProcesosPorDeptoAsync(ProcesosDeptos, null);
        }
        
        public void InsertarProcesosPorDeptoAsync(Silverlight.BoundedContext.ServiceWCF.ProcesosPorDepartamentosDto ProcesosDeptos, object userState) {
            if ((this.onBeginInsertarProcesosPorDeptoDelegate == null)) {
                this.onBeginInsertarProcesosPorDeptoDelegate = new BeginOperationDelegate(this.OnBeginInsertarProcesosPorDepto);
            }
            if ((this.onEndInsertarProcesosPorDeptoDelegate == null)) {
                this.onEndInsertarProcesosPorDeptoDelegate = new EndOperationDelegate(this.OnEndInsertarProcesosPorDepto);
            }
            if ((this.onInsertarProcesosPorDeptoCompletedDelegate == null)) {
                this.onInsertarProcesosPorDeptoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInsertarProcesosPorDeptoCompleted);
            }
            base.InvokeAsync(this.onBeginInsertarProcesosPorDeptoDelegate, new object[] {
                        ProcesosDeptos}, this.onEndInsertarProcesosPorDeptoDelegate, this.onInsertarProcesosPorDeptoCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Silverlight.BoundedContext.ServiceWCF.IServiceN_Capas.BeginObtenerTodosLosProcesos(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginObtenerTodosLosProcesos(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<Silverlight.BoundedContext.ServiceWCF.ProcesosDto> Silverlight.BoundedContext.ServiceWCF.IServiceN_Capas.EndObtenerTodosLosProcesos(System.IAsyncResult result) {
            return base.Channel.EndObtenerTodosLosProcesos(result);
        }
        
        private System.IAsyncResult OnBeginObtenerTodosLosProcesos(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((Silverlight.BoundedContext.ServiceWCF.IServiceN_Capas)(this)).BeginObtenerTodosLosProcesos(callback, asyncState);
        }
        
        private object[] OnEndObtenerTodosLosProcesos(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<Silverlight.BoundedContext.ServiceWCF.ProcesosDto> retVal = ((Silverlight.BoundedContext.ServiceWCF.IServiceN_Capas)(this)).EndObtenerTodosLosProcesos(result);
            return new object[] {
                    retVal};
        }
        
        private void OnObtenerTodosLosProcesosCompleted(object state) {
            if ((this.ObtenerTodosLosProcesosCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ObtenerTodosLosProcesosCompleted(this, new ObtenerTodosLosProcesosCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ObtenerTodosLosProcesosAsync() {
            this.ObtenerTodosLosProcesosAsync(null);
        }
        
        public void ObtenerTodosLosProcesosAsync(object userState) {
            if ((this.onBeginObtenerTodosLosProcesosDelegate == null)) {
                this.onBeginObtenerTodosLosProcesosDelegate = new BeginOperationDelegate(this.OnBeginObtenerTodosLosProcesos);
            }
            if ((this.onEndObtenerTodosLosProcesosDelegate == null)) {
                this.onEndObtenerTodosLosProcesosDelegate = new EndOperationDelegate(this.OnEndObtenerTodosLosProcesos);
            }
            if ((this.onObtenerTodosLosProcesosCompletedDelegate == null)) {
                this.onObtenerTodosLosProcesosCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnObtenerTodosLosProcesosCompleted);
            }
            base.InvokeAsync(this.onBeginObtenerTodosLosProcesosDelegate, null, this.onEndObtenerTodosLosProcesosDelegate, this.onObtenerTodosLosProcesosCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Silverlight.BoundedContext.ServiceWCF.IServiceN_Capas CreateChannel() {
            return new ServiceN_CapasClientChannel(this);
        }
        
        private class ServiceN_CapasClientChannel : ChannelBase<Silverlight.BoundedContext.ServiceWCF.IServiceN_Capas>, Silverlight.BoundedContext.ServiceWCF.IServiceN_Capas {
            
            public ServiceN_CapasClientChannel(System.ServiceModel.ClientBase<Silverlight.BoundedContext.ServiceWCF.IServiceN_Capas> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetAllPlantas(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetAllPlantas", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<Silverlight.BoundedContext.ServiceWCF.PlantaDto> EndGetAllPlantas(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<Silverlight.BoundedContext.ServiceWCF.PlantaDto> _result = ((System.Collections.ObjectModel.ObservableCollection<Silverlight.BoundedContext.ServiceWCF.PlantaDto>)(base.EndInvoke("GetAllPlantas", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginInsertarPlantas(Silverlight.BoundedContext.ServiceWCF.PlantaDto plantaDto, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = plantaDto;
                System.IAsyncResult _result = base.BeginInvoke("InsertarPlantas", _args, callback, asyncState);
                return _result;
            }
            
            public Silverlight.BoundedContext.ServiceWCF.PlantaDto EndInsertarPlantas(System.IAsyncResult result) {
                object[] _args = new object[0];
                Silverlight.BoundedContext.ServiceWCF.PlantaDto _result = ((Silverlight.BoundedContext.ServiceWCF.PlantaDto)(base.EndInvoke("InsertarPlantas", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdatePlanta(Silverlight.BoundedContext.ServiceWCF.PlantaDto plantaDto, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = plantaDto;
                System.IAsyncResult _result = base.BeginInvoke("UpdatePlanta", _args, callback, asyncState);
                return _result;
            }
            
            public Silverlight.BoundedContext.ServiceWCF.PlantaDto EndUpdatePlanta(System.IAsyncResult result) {
                object[] _args = new object[0];
                Silverlight.BoundedContext.ServiceWCF.PlantaDto _result = ((Silverlight.BoundedContext.ServiceWCF.PlantaDto)(base.EndInvoke("UpdatePlanta", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginObtenerTodosLosDepartamentosPorPlanta(string plantaId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = plantaId;
                System.IAsyncResult _result = base.BeginInvoke("ObtenerTodosLosDepartamentosPorPlanta", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<Silverlight.BoundedContext.ServiceWCF.DepartamentosDto> EndObtenerTodosLosDepartamentosPorPlanta(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<Silverlight.BoundedContext.ServiceWCF.DepartamentosDto> _result = ((System.Collections.ObjectModel.ObservableCollection<Silverlight.BoundedContext.ServiceWCF.DepartamentosDto>)(base.EndInvoke("ObtenerTodosLosDepartamentosPorPlanta", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginInsertarDepartamentos(Silverlight.BoundedContext.ServiceWCF.DepartamentosDto deptoDto, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = deptoDto;
                System.IAsyncResult _result = base.BeginInvoke("InsertarDepartamentos", _args, callback, asyncState);
                return _result;
            }
            
            public Silverlight.BoundedContext.ServiceWCF.DepartamentosDto EndInsertarDepartamentos(System.IAsyncResult result) {
                object[] _args = new object[0];
                Silverlight.BoundedContext.ServiceWCF.DepartamentosDto _result = ((Silverlight.BoundedContext.ServiceWCF.DepartamentosDto)(base.EndInvoke("InsertarDepartamentos", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateDepartamentos(Silverlight.BoundedContext.ServiceWCF.DepartamentosDto deptoDto, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = deptoDto;
                System.IAsyncResult _result = base.BeginInvoke("UpdateDepartamentos", _args, callback, asyncState);
                return _result;
            }
            
            public Silverlight.BoundedContext.ServiceWCF.DepartamentosDto EndUpdateDepartamentos(System.IAsyncResult result) {
                object[] _args = new object[0];
                Silverlight.BoundedContext.ServiceWCF.DepartamentosDto _result = ((Silverlight.BoundedContext.ServiceWCF.DepartamentosDto)(base.EndInvoke("UpdateDepartamentos", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginOtenerTodosLosProcesosPorDepto(Silverlight.BoundedContext.ServiceWCF.ProcesosPorDepartamentosDto procesoDeptoDto, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = procesoDeptoDto;
                System.IAsyncResult _result = base.BeginInvoke("OtenerTodosLosProcesosPorDepto", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<Silverlight.BoundedContext.ServiceWCF.ProcesosPorDepartamentosDto> EndOtenerTodosLosProcesosPorDepto(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<Silverlight.BoundedContext.ServiceWCF.ProcesosPorDepartamentosDto> _result = ((System.Collections.ObjectModel.ObservableCollection<Silverlight.BoundedContext.ServiceWCF.ProcesosPorDepartamentosDto>)(base.EndInvoke("OtenerTodosLosProcesosPorDepto", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginInsertarProcesosPorDepto(Silverlight.BoundedContext.ServiceWCF.ProcesosPorDepartamentosDto ProcesosDeptos, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = ProcesosDeptos;
                System.IAsyncResult _result = base.BeginInvoke("InsertarProcesosPorDepto", _args, callback, asyncState);
                return _result;
            }
            
            public Silverlight.BoundedContext.ServiceWCF.ProcesosPorDepartamentosDto EndInsertarProcesosPorDepto(System.IAsyncResult result) {
                object[] _args = new object[0];
                Silverlight.BoundedContext.ServiceWCF.ProcesosPorDepartamentosDto _result = ((Silverlight.BoundedContext.ServiceWCF.ProcesosPorDepartamentosDto)(base.EndInvoke("InsertarProcesosPorDepto", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginObtenerTodosLosProcesos(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("ObtenerTodosLosProcesos", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<Silverlight.BoundedContext.ServiceWCF.ProcesosDto> EndObtenerTodosLosProcesos(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<Silverlight.BoundedContext.ServiceWCF.ProcesosDto> _result = ((System.Collections.ObjectModel.ObservableCollection<Silverlight.BoundedContext.ServiceWCF.ProcesosDto>)(base.EndInvoke("ObtenerTodosLosProcesos", _args, result)));
                return _result;
            }
        }
    }
}
